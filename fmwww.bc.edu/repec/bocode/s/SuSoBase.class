/* 

   Survey Solutions API base class
   Sergiy Radyakin, Тhе Wоrld Bаnk, 2020-2022
   
*/

class SuSoBase {
}

program define .boolstandard, rclass
  version 16.0
  syntax anything
  
  local trueval = "true"
  local falseval = "false"
  
  capture confirm number `anything'
  if (!_rc) {
  	return local result=cond(`anything'==0, "`falseval'", "`trueval'")
    exit      
  }
  
  local anything=strlower(`"`anything'"')
  
  if inlist(`"`anything'"',"true","on","+","activate") {
  	return local result="`trueval'"
    exit
  }
  
  if inlist(`"`anything'"',"false","off","-","deactivate") {
  	return local result="`falseval'"
    exit
  }
  
  display as error `"Unknown value: `anything'"'
  error 197  
end


program define .pick_value
    // Picks one identifying variable value by name from results saved in r()
    version 16.0
    args vn
    
    local n=r(id_count)
    local i=1
    while `i'<=`n' {
        if (`"`r(id_variable`i')'"'==`"`vn'"') {
            class exit `"`r(id_answer`i')'"'
        }
        local i=`i'+1
    }
    class exit ""
end


program define .rostervectoraddress, rclass
  // Converts a RosterVectorAddress written in the Survey Solutions' 
  // convention into a fragment of an URL query.
  
  version 16.0
  args rva
  if missing(`"`rva'"') exit
  local word "rosterVector"
  local rva=subinstr(`"`rva'"',"-","&`word'=",.)
  local rva=subinstr(`"`word'=`rva'"',"`word'=&`word'=","`word'=-",.)
  return local result `"`rva'&"'
end


program define .guidstandard, rclass
  version 16.0
  syntax anything, [format(string)]
  
  if missing(`"`format'"') local format="short"
  local format=strlower(`"`format'"')
  assert inlist(`"`format'"',"short","dash")
  
  local guid=strtrim(strlower(`"`anything'"'))
  local guid=subinstr(`"`guid'"',"-","",.)
  if strlen(`"`guid'"')!=32 {
  	display as error "Error! Invalid GUID: `anything'"
    error 197
  }
  forval i=1/32 {
  	local c=substr(`"`guid'"',`i',1)
  	if !(inlist(`"`c'"',"0","1","2","3","4","5","6","7") | ///
         inlist(`"`c'"',"8","9","a","b","c","d","e","f")) {
        display as error "Error! Invalid GUID: `anything'"     	
        error 197
    }
  }
  
  if "`format'"=="short" {
  	return local result="`guid'"
    exit
  }

  return local result = ///
         substr("`guid'", 1, 8) + "-" + ///
         substr("`guid'", 9, 4) + "-" + ///
         substr("`guid'",13, 4) + "-" + ///
         substr("`guid'",17, 4) + "-" + ///
         substr("`guid'",21,12)
end


program define version_normalize, rclass
    // Internal: Normalize "22.06.0.32682-rc" to "22.06.0 (build 32682)-rc"
    version 16.0
	syntax , Version(string)
	local v=`"`version'"'
	
	local p=strpos(`"`v'"', "-")
	if (`p'>0) {
		local branch=substr(`"`v'"',`p'+1,strlen(`"`v'"')-`p')
		local vfull=substr(`"`v'"',1,`p'-1)
		local l=strpos(strreverse(`"`vfull'"'),".")-1
		local build=substr(`"`vfull'"', strlen(`"`vfull'"')-`l'+1,`l')
		local core=substr(`"`vfull'"',1,strlen(`"`vfull'"')-`l'-1)
		local result=`"`core' (build `build')-`branch'"'
		return local version=`"`result'"'
	}
	else {
		return local version=`"`version'"'
	}
end


program define .buildvars, rclass
    version 16.0
    // TODO: add check for consistency of ids (id* variables)
    local iddata ""
    forval i=1/`=_N' {
        local v `"`=variable[`i']'"'
        local a `"`=answer[`i']'"'
        local sfx=""
        local j=1
        while (`j'<=4 & id`j'[`i']!=.) {
            local sfx `"`sfx'_`=id`j'[`i']'"'
            local j=`j'+1
        }
        if !missing(id1[`i']) {
        	// identification by identity
            local id "Identity"
            .guidstandard `=identity[`i']', format(short)
            local v=`"`=r(result)'`sfx'"'
        }
        else {
        	// identification by varname
            local id "Variable"
            local v=`"`=variable[`i']'"'
        }
        local iddata = `"`iddata', {"`id'":"`v'", "Answer":"`a'"}"'
    }
    if (strpos(`"`iddata'"',", ")==1) {
        local iddata=substr(`"`iddata'"',3,.)
    }
    return local result = `"`iddata'"'
end


// END OF FILE

